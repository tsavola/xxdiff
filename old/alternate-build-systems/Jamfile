# # -*- mode: jam -*-
# #*****************************************************************************\
# # $RCSfile$
# #
# # Copyright (C) 2001-2003  Martin Blais <blais@furius.ca>
# #
# # This program is free software; you can redistribute it and/or modify
# # it under the terms of the GNU General Public License as published by
# # the Free Software Foundation; either version 2 of the License, or
# # (at your option) any later version.
# #
# # This program is distributed in the hope that it will be useful,
# # but WITHOUT ANY WARRANTY; without even the implied warranty of
# # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# # GNU General Public License for more details.
# #
# # You should have received a copy of the GNU General Public License
# # along with this program; if not, write to the Free Software
# # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# #
# #****************************************************************************/
# #
# # Generate with xxdiff.t template, as `tmake -t xxdiff.t xxdiff.pro > Makefile'
# #
# 
# TEMPLATE = xxdiff
# CONFIG = release qt warn_on
# 
# # For KDE support, uncomment the following lines:
# #TMAKE_CFLAGS += -DXX_KDE -I/usr/include/kde
# #TMAKE_CXXFLAGS += -DXX_KDE -I/usr/include/kde
# #TMAKE_LIBS += -lkdeui -lkio -lqt-mt
# 
# debug:TMAKE_CFLAGS += -DXX_DEBUG
# debug:TMAKE_CXXFLAGS += -DXX_DEBUG
# 
# #XX_VERSION=2.5-devel
# XX_VERSION=2.6
# 
# TMAKE_CFLAGS_DEBUG += -DXX_VERSION="\"$$XX_VERSION ($(COMPILE_DATE))\""
# TMAKE_CFLAGS_RELEASE += -DXX_VERSION="\"$$XX_VERSION\""
# 
# INCLUDEPATH += .
# 
# LEXYACC  = resParser
# LEXYACC_OBJ  = $$LEXYACC.l.c $$LEXYACC.y.c $$LEXYACC.y.h
# TMAKE_CLEAN += $$LEXYACC_OBJ doc.h
# 
# # Needed for Windows compile?
# #REQUIRES=full-config
# 
# #
# # win32-msvc
# #
# 
# win32-msvc:DEFINES += QT_DLL QT_THREAD_SUPPORT WINDOWS HAVE_STRING_H
# #win32-msvc:TMAKE_CFLAGS += -GX
# win32-msvc:TMAKE_CXXFLAGS += -GX
# win32-msvc:INCLUDEPATH += winfixes
# 
# #win32-msvc:TMAKE_LFLAGS += /NODEFAULTLIB:MSVCRT
# 
# #
# # irix-n32
# #
# 
# irix-n32:TMAKE_CXXFLAGS += -woff 1375,1424,3201,1209,1110 -LANG:std
# irix-n32:TMAKE_CXXFLAGS += -DCOMPILER_MIPSPRO
# 
# # always disable full warnings for C code.
# irix-n32:TMAKE_CFLAGS_WARN_ON =
# irix-n32:TMAKE_CC = cc
# irix-n32:TMAKE_CFLAGS = $$TMAKE_CXXFLAGS
# 
# irix-n32:TMAKE_MOC = ${QTDIR}/bin/moc
# 
# irix-n32:TMAKE_LIBS += -lC -lCio -lm
# irix-n32:TMAKE_LIBDIR_QT = $(QTDIR)/lib32
# irix-n32:TMAKE_LIBS += -Wl,-rpath -Wl,$(QTDIR)/lib32
# 
# irix-n32:TMAKE_CFLAGS_RELEASE += -OPT:Olimit=4000
# 
# 
# #
# # linux-g++
# #
# 
# linux-g++:TMAKE_CXXFLAGS += -DCOMPILER_GNU
# 
# # debugging memory problems
# #linux-g++:TMAKE_CXXFLAGS += -fcheck-memory-usage
# #linux-g++:TMAKE_LIBS += -lmpatrol -lbfd -liberty
# 
# #
# # solaris-cc
# #
# 
# solaris-cc:TMAKE_CXXFLAGS += -DCOMPILER_SUNWSPRO
# 
# #
# # aix-xlc
# #
# 
# aix-xlc:TMAKE_CXXFLAGS += -DCOMPILER_AIXXLC
# 
# #
# # osf1-g++
# #
# 
# osf1-g++:TMAKE_CXXFLAGS += -DCOMPILER_GNU
# 
# 
# # Add diff files to link against directly
# DIFFUTILS_DIR = ../diffutils-2.7
# 
# # TMAKE_LIBS +=  \
# # 	$$DIFFUTILS_DIR/analyze.o \
# # 	$$DIFFUTILS_DIR/cmpbuf.o \
# # 	$$DIFFUTILS_DIR/dir.o \
# # 	$$DIFFUTILS_DIR/io.o \
# # 	$$DIFFUTILS_DIR/util.o \
# # 	$$DIFFUTILS_DIR/context.o \
# # 	$$DIFFUTILS_DIR/ed.o \
# # 	$$DIFFUTILS_DIR/ifdef.o \
# # 	$$DIFFUTILS_DIR/normal.o \
# # 	$$DIFFUTILS_DIR/side.o \
# # 	$$DIFFUTILS_DIR/fnmatch.o \
# # 	$$DIFFUTILS_DIR/regex.o \
# # 	$$DIFFUTILS_DIR/version.o \
# # 	$$DIFFUTILS_DIR/diff.o \
# # 	$$DIFFUTILS_DIR/diff3.o
# 
# HEADERS = \
# 	optionsDialog.h \
# 	searchDialog.h \
# 	app.h \
# 	app.inline.h \
# 	cmdline.h \
# 	suicideMessageBox.h \
# 	defs.h \
# 	types.h \
# 	diffs.h \
# 	diffs.inline.h \
# 	builder.h \
# 	builder.inline.h \
# 	builderFiles2.h \
# 	builderFiles3.h \
# 	builderDirs2.h \
# 	builderUnmerge.h \
# 	exceptions.h \
# 	buffer.h \
# 	buffer.inline.h \
# 	help.h \
# 	hordiffImp.h \
# 	line.h \
# 	line.inline.h \
# 	main.h \
# 	overview.h \
# 	resParser.h \
# 	resources.h \
# 	resources.inline.h \
# 	accelUtil.h \
# 	copyLabel.h \
# 	text.h \
# 	scrollView.h \
# 	central.h \
# 	merged.h \
# 	lineNumbers.h \
# 	util.h \
# 	markers.h \
# 	getopt.h \
# 	diffutils.h \
# 	diffutils_hack.h \
# 	doc.qml \
# 	kdeSupport.h \
# 	version.h
# 
# SOURCES = \

C++ = gcc ;
UIC = $(QTDIR)/bin/uic ;
MOC = $(QTDIR)/bin/moc ;

# HDRS += /work/gcc3/usr/include/g++-v3 ;
HDRS += . $(QTDIR)/include ;

DEFINES += COMPILER_GNU ;


Main xxdiff :
 	optionsDialog.cpp
	searchDialog.cpp
	app.cpp
	cmdline.cpp
	suicideMessageBox.cpp
	main.cpp
	overview.cpp
	copyLabel.cpp
	text.cpp
	scrollView.cpp
	central.cpp
	merged.cpp
	lineNumbers.cpp
	util.cpp
	help.cpp
	exceptions.cpp
	builder.cpp
	builderFiles2.cpp
	builderFiles3.cpp
	builderDirs2.cpp
	builderUnmerge.cpp
	diffs.cpp
	hordiffImp.cpp
	line.cpp
	buffer.cpp
	resources.cpp
	accelUtil.cpp
	resParser.cpp
	markers.cpp
	getopt.c
	getopt1.c
	version.c
	.moc.cpp
	;

LINKLIBS += -L$QTDIR/lib -lqt ;



# 
# #	diffutils.cpp
# 
# INTERFACES =
# 	markersWidgetBase.ui
# 	optionsDialogBase.ui
# 	searchDialogBase.ui
# 
# TARGET = xxdiff
# 
# #DEPENDPATH=../../include
# 
# #REQUIRES=large-config
# 


#===============================================================================

rule Moc
{
    Temporary $(<) ;
    NoCare Moc ;
    NotFile Moc ;
    Clean $(<) ;
    RmTemps $(<:S=.o) : $(<) ;
    # are both of the following necessary?
    Depends $(<) : $(>) ;
    Depends $(<:S=.o) : $(<) ;
}

actions Moc
{
    $(RM) $(<)
    for i in $(>) ; do $(MOC) $i >> $(<) ; done
}

Moc .moc.cpp : 
 	optionsDialog.h
 	searchDialog.h
 	app.h
 	app.inline.h
 	cmdline.h
 	suicideMessageBox.h
 	defs.h
 	types.h
 	diffs.h
 	diffs.inline.h
 	builder.h
 	builder.inline.h
 	builderFiles2.h
 	builderFiles3.h
 	builderDirs2.h
 	builderUnmerge.h
 	exceptions.h
 	buffer.h
 	buffer.inline.h
 	help.h
 	hordiffImp.h
 	line.h
 	line.inline.h
 	main.h
 	overview.h
 	resParser.h
 	resources.h
 	resources.inline.h
 	accelUtil.h
 	copyLabel.h
 	text.h
 	scrollView.h
 	central.h
 	merged.h
 	lineNumbers.h
 	util.h
 	markers.h
 	getopt.h
 	diffutils.h
 	diffutils_hack.h
 	doc.qml
 	kdeSupport.h
 	version.h
	;

# And in Jamfile, I do something like this
# 
# Main myapp : ... .moc.cpp ;
# LINKLIBS on myapp += -L$QTDIR/lib -lqt ;
# 
# Moc .moc.cpp : header1.h header2.h ... headern.h ;
# 
# This causes jam to keep a single .o file around, .moc.o, and says that
# .moc.o depends on the temporary file .moc.cpp, which in turn depends on
# all the header files named by the Moc rule. Jam will figure out whether it
# needs to create .moc.cpp and update .moc.o, and if it does it will delete
# .moc.cpp again after compiling it.
# 
# I hope this is understandable. I'll use it to build an Uic rule that
# generates one .h and one .cpp file from one .ui file. Since Jam doesn't
# really like multi-target rules, I hack.
# 
# My goal is to have a rule that I can use like this:
# 
# Uic mumble.h : mumble.ui ;
# 
# And to achieve it, I'll crudely hack that rule so that it'll make a
# mumble.cpp file as well.

rule Uic
{
    Temporary $(<:S=.cpp) ; # the .cpp file is temporary
    Clean $(<:S=.h) ; # jam clean deletes the .h
    Clean $(<:S=.cpp) ; # jam clean deletes the .cpp
    RmTemps $(<:S=.o) : $(<:S=.cpp) ; # jam deletes .cpp after compiling .o
    Depends $(<:S=.h) : $(>) ; # the .h file depends on the .ui file
    Depends $(<:S=.cpp) : $(>) ; # the .cpp file depends on the .ui file
    Depends $(<:S=.o) : $(<:S=.cpp) ; # the .o file depends on the .cpp file
}

# I don't have time to dig into uic right now. The action for Uic has to be
# something like this:

actions Uic
{
    $(UIC) $(>) -o $(<:S=.h)
    $(UIC) $(>) -impl $(<:S=.h) -o $(<:S=.cpp)
}

Uic optionsDialogBase.h : optionsDialogBase.ui ;


# I can probably look into it more thoroughly tomorrow, but I'm pressed for
# time today.
# 
# --Arnt
# 
